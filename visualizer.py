import pygame
import numpy as np

# This function was used to help design the game board's net and score
# board size and placement. It uses pygame as a display, and I toggle which
# pixels are black or white  using a 640x480 array.
def design():
    pygame.init()
    screen = pygame.display.set_mode((640, 480))
    pygame.display.set_caption("Black and White Display")
    
    running = True
    
    # Create a 640x480 array filled with 0 (black)
    pixel_array = np.zeros((480, 640), dtype=np.uint8)

    # draw a board full of blocks
    side = 18
    space = 2 
    vstart = (480 - 20 * (side + space)) // 2
    hstart = (640 - 10 * (side + space)) // 2
    for i in range(side):
        for col in range(10):
            pixel_array[vstart + i:(vstart + i + (side + space) * 20):(side + space), hstart + col * (side + space):hstart + col * (side + space) + side] = 255
    
    # draw the next block tile
    for x in range(80, 240):
        pixel_array[x, 450:610] = 200
    
    pixel_array[50:70, 450:453] = 255
    for i in range(1,12):
        pixel_array[]
    pixel_array[50:70, 462:465] = 255

    # draw the number of lines tile


    pixel_array = pixel_array.T
    
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        
        # Convert array to a Pygame surface
        surface = pygame.surfarray.make_surface(np.stack([pixel_array]*3, axis=-1))
        screen.blit(surface, (0, 0))
        pygame.display.flip()
    
    pygame.quit()

def testbench():

    # open output file generated by the VHDL simulation
    with open("[insert filename]", 'r') as f:
        results = f.readlines()
        results = [s.rstrip() for s in results]

    # for every line in the output file, display the corresponding image
    for i in range(len(results)):
        pygame.init()
        screen = pygame.display.set_mode((640, 480))
        pygame.display.set_caption(f"Test Case {i+1}")

        # parse the results from a string into a 480 x 640 array
        pixel_array = np.array(list(results[i].replace('U', '1')), dtype=int).reshape(480, 640)
        # multiply by 255 so high bits on the output are white
        pixel_array = pixel_array * 255
        # flip the array so it displays correctly
        pixel_array = pixel_array.T
        
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
            
            # Convert array to a Pygame surface
            surface = pygame.surfarray.make_surface(np.stack([pixel_array]*3, axis=-1))
            screen.blit(surface, (0, 0))
            pygame.display.flip()
        
        pygame.quit()

if __name__ == "__main__":
    design()